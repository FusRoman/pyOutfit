name: Python binding tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    name: ${{ matrix.os }} • py${{ matrix.python-version }} • features=${{ matrix.features || 'default' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        features: ["" , "parallel"]

    env:
      CARGO_TERM_COLOR: always
      RUST_BACKTRACE: 1
      BUILD_FEATURES: ${{ matrix.features }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup Rust (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: clippy,rustfmt

      - name: Cache Rust build
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            .
          cache-on-failure: true

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Upgrade pip & install test deps
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip install pytest pytest-cov maturin

      - name: Build and develop-install the extension (maturin)
        # Utilise --features si matrix.features non vide
        run: |
          if [ -z "${BUILD_FEATURES}" ]; then
            maturin develop --release
          else
            maturin develop --release --features "${BUILD_FEATURES}"
          fi

      - name: Show installed package info
        run: |
          python -c "import sys, pkgutil; print('Python:', sys.version)"
          python -c "import importlib, pkgutil; import py_outfit as m; print('py_outfit:', getattr(m,'__version__', 'unknown')); print('from:', m.__file__)"

      - name: Run pytest
        run: |
          pytest -q --maxfail=1 --disable-warnings -ra

  lint:
    name: Rust lint (clippy & fmt)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy,rustfmt
      - uses: Swatinem/rust-cache@v2
      - name: rustfmt
        run: cargo fmt --all -- --check
      - name: clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
